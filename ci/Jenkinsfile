node('docker-slave') {   
    withCredentials([
        sshUserPrivateKey(credentialsId: 'SSH_PLANPLEASE_GIT', keyFileVariable: 'SSH_KEY_FILE')
    ]) {

    withEnv([                
        'SCM_REPOSITORY=git@github.com:loferreiranuno/Qcenar.AudioEngine.git',
        'SCM_CREDENTIALS=SSH_PLANPLEASE_GIT'
    ]) {

    stage('init') {
        env.IMAGE_NAME=env.JOB_BASE_NAME.toLowerCase().replaceAll("\\.", "-")
        env.PROJECT_KEY=env.JOB_NAME.toLowerCase().replaceAll("\\.", "_").replaceAll("\\s", "_").replaceAll("\\/", "_")

        sh '''
            printenv
        '''
    }
    
    stage('checkout') {
        checkout([
            $class: 'GitSCM', 
            branches: [[name: 'origin/main']], 
            doGenerateSubmoduleConfigurations: false, 
            extensions: [
                [$class: 'CheckoutOption', timeout: 120],
                [$class: 'CloneOption',
                    depth: 0,
                    noTags: false,
                    reference: '/other/optional/local/reference/clone',
                    shallow: false,
                    timeout: 120]
            ], 
            submoduleCfg: [], 
            userRemoteConfigs: [
                [
                    credentialsId: env.SCM_CREDENTIALS, 
                    url: env.SCM_REPOSITORY
                ]
            ]
        ])
        def WORKSPACE=pwd()
    } 
       
    stage('build') {
        sh(script: """
            docker build . \\
            --file ci/Build.Dockerfile \\
            --tag $IMAGE_NAME-base:$BUILD_NUMBER
        """)
    }
    
    stage('publish') {
        sh(script: """
            docker build . \\
                --file ci/Publish.Dockerfile \\
                --tag $DOCKER_REGISTRY/$IMAGE_NAME:$BUILD_NUMBER \\
                --build-arg BUILD_NUMBER=$BUILD_NUMBER \\
                --build-arg BASE=$IMAGE_NAME-base:$BUILD_NUMBER
            docker push \\
                $DOCKER_REGISTRY/$IMAGE_NAME:$BUILD_NUMBER
        """)
    }

    stage('deploy in prod') {
        sh(script: """
            export IMAGE=$DOCKER_REGISTRY/$IMAGE_NAME:$BUILD_NUMBER
            cd ci
            docker-compose \\
                --project-name $PROJECT_KEY \\
                up \\
                --detach \\
                --remove-orphans
        """)
    }
}}}